{"version":3,"file":"ppn-radio.js","sourceRoot":"","sources":["../../../../src/webcomponents/common/forms/ppn-radio.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAkB,GAAG,EAAa,SAAS,EAAE,MAAM,KAAK,CAAA;AACjF,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAC3D,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAA;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,yCAAyC,CAAA;AAIvE;;;;;;;GAOG;AAEH,IAAqB,QAAQ,GAA7B,MAAqB,QAAS,SAAQ,UAAU;IAAhD;;QAGI,YAAO,GAAgB;YACnB,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,EAAE;YACb,MAAM,EAAE,EAAE;YACV,MAAM,EAAE,EAAE;SACb,CAAA;IA4HL,CAAC;IAnDY,MAAM;QACX,OAAO,IAAI,CAAA;cACJ,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA,kCAAmC,IAAI,CAAC,OAAO,CAAC,IAAK,MAAM,CAAC,CAAC,CAAC,EAAG;cAChG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CACxC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI,SAAS,KAAK,EAAE,EAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,CAAE,CACnH;SACJ,CAAA;IACL,CAAC;IAED;;;;;;;;OAQG;IACH,aAAa,CAAC,IAAY,EAAE,SAAiB,EAAE,SAAiB,EAAE,QAAgB;QAC9E,OAAO,IAAI,CAAA;wBACM,SAAU;;;uBAGX,SAAU;2BACN,KAAM;yBACR,IAAI,CAAC,cAAe;wBACrB,SAAU;;yBAEV,SAAS;kBACf,gBAAgB,CAAC,QAAQ,CAAE;kBAC3B,IAAK;;SAEf,CAAA;IACL,CAAC;IAED;;;OAGG;IACK,cAAc,CAAC,CAAQ;QAC3B,MAAM,SAAS,GAA4B,CAAC,CAAC,MAA0B,CAAC;QACxE,IAAK,SAAS,KAAK,IAAI;YAAG,OAAM;QAEhC,MAAM,OAAO,GAAW;YACpB,MAAM,EAAE,SAAS,CAAC,KAAK;YACvB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACjB,CAAA;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;CACJ,CAAA;AA1HmB,eAAM,GACd,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA0DU,SAAS,CAAC,aAAa,CAAC;;;;;;;;;;aAUnC,CAAA;AA7EV;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCAOxB;AATgB,QAAQ;IAD5B,aAAa,CAAC,WAAW,CAAC;GACN,QAAQ,CAqI5B;eArIoB,QAAQ","sourcesContent":["import { LitElement, html, TemplateResult, css, CSSResult, unsafeCSS } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { getSvgFromSprite } from '../../../assets/functions/utils'\nimport { media_desktop } from '../../../assets/styles/constants-styles'\nimport { IFormInputs } from '../../../assets/interfaces/iForms'\nimport { IEvent } from '../../../assets/interfaces/iEvents'\n\n/**\n * <ppn-radio>\n * Doc: -\n *  \n * @author              : PS\n * @created             : 2022-08-05 [ WPS-4886 ]\n * @prop dataRow        : corresponding data object for inputs row\n */\n@customElement('ppn-radio')\nexport default class PpnRadio extends LitElement {\n\n    @property({type: Object})\n    dataRow: IFormInputs = {\n        type: '', \n        text: '', \n        nameGroup: '', \n        active: '', \n        values: []\n    }\n\n    static override styles: CSSResult = \n            css`\n                :host([active=\"false\"]) {\n                    display: none;\n                }\n\n                :host {\n                    margin-bottom: var(--mg-md);\n                }\n\n                .ppn-input-side-text {\n                    margin: auto var(--mg-lg) auto 0;\n                    flex-grow: initial;\n                    place-self: baseline;\n                    flex-shrink: 0;\n                }\n        \n                .ppn-input-radio-label {\n                    cursor: pointer; \n                    display: flex; \n                    align-items: center;\n                    justify-content: center;\n                    width: 100%; \n                    height: var(--sz-2xl); \n                    border-radius: var(--br-pn); \n                    border: 1px solid var(--c-grey-icon);  \n                    line-height: var(--fs-base); \n                    transition: border-color var(--tr-base), color var(--tr-base); \n                }\n\n                .ppn-input-radio-label:not(:last-child) {\n                    margin-right: var(--mg-lg);\n                }\n\n                .ppn-input-radio-label:hover {\n                    border-color: var(--c-grey);\n                }\n        \n                svg {\n                    height: var(--sz-sm);\n                    width: var(--sz-sm);\n                    margin-right: var(--mg-xs);\n                    fill: currentColor;\n                }\n        \n                .ppn-input-radio {\n                    display: none; \n                }\n        \n                .ppn-input-radio:checked + .ppn-input-radio-label {\n                    border-color: var(--c-primary); \n                    color: var(--c-primary);\n                    font-weight: var(--fw-medium);\n                }\n\n                .ppn-input-radio:checked:hover + .ppn-input-radio-label:hover {\n                    border-color: var(--c-primary-dark); \n                }      \n                \n                @media ${unsafeCSS(media_desktop)} {\n                    :host {\n                        display: flex;\n                        flex-flow: row nowrap;\n                    }\n\n                    .ppn-input-side-text {\n                        width: 250px;\n                    }\n                }\n            `;\n\n    override render(): object {\n        return html`\n            ${ this.dataRow.text !== '' ? html`<p class=\"ppn-input-side-text\">${ this.dataRow.text }</p>` : '' }\n            ${ this.dataRow.values.map((input, index) => \n                this.generateRadio(input['text'], input['nameInput'] || `input-${index}`,this.dataRow.nameGroup, input['icon'] )\n            )}\n        `\n    }\n\n    /** Change the status & value of the radio button on click\n     * @author                    : PS\n     * @param  text {string}      : the displayed text\n     * @param  nameGroup {string} : name for the group of inputs\n     * @param  nameInput {string} : name of the input\n     * @param  iconName {string}  : name of the icon\n     * @return  TemplateResult    : the html of the input\n     * @created                   : 2022-08-05 [ WPS-4886 ]\n     */\n    generateRadio(text: string, nameInput: string, nameGroup: string, iconName: string): TemplateResult {\n        return html`\n            <input id=${ nameInput }\n                type=\"radio\"\n                class=\"ppn-input-radio\"\n                name=${ nameGroup }\n                .checked=${ false }\n                @click=${ this._dispatchClick }\n                value=${ nameInput }\n            ></input>\n            <label for=${nameInput} class=\"ppn-input-radio-label\">\n                ${ getSvgFromSprite(iconName) }\n                ${ text }\n            </label>\n        `\n    }\n\n    /** Dispatches event on click so we can pass it to other components\n     * @author                : PS\n     * @created               : 2022-08-05 [ WPS-4886 ]\n     */\n    private _dispatchClick(e: Event): void {\n        const el_target: HTMLInputElement | null = e.target as HTMLInputElement; \n        if ( el_target === null ) return\n\n        const options: IEvent = {\n            detail: el_target.value,\n            bubbles: true,\n            composed: true\n        }\n\n        this.dispatchEvent(new CustomEvent('ppnRadioClick', options));\n    }\n}  "]}