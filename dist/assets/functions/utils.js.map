{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/assets/functions/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAqB,GAAG,EAAE,MAAM,KAAK,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAA;AAExD;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAC,MAAc;IAC3C,IAAI,CAAC,MAAM;QAAE,OAAO,EAAE,CAAA;IACtB,MAAM,MAAM,GAAgB,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAgB,CAAA;IAE1E,OAAO,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE;QAClD,CAAC,CAAC,GAAG,CAAA,sFAAsF,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAA;AACtI,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB;IAC5B,OAAO,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;AACtF,CAAC","sourcesContent":["import { SVGTemplateResult, svg } from 'lit';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js'\n\n/**\n * Queries the id of the symbol we want from the page sprite from the light dom, returning a new svg generated from it\n * @author                     : PS\n * @created                    : 2022-20-05 \n * @param {string} id_svg      : the id of the svg\n * @return {SVGTemplateResult | string} : the template result including an svg with the queried symbol, or empty string if not found\n */\nexport function getSvgFromSprite(id_svg: string): SVGTemplateResult | string {\n    if (!id_svg) return ''\n    const el_svg: HTMLElement = document.getElementById(id_svg) as HTMLElement\n\n    return el_svg === null || !el_svg.hasChildNodes() ? ''\n        : svg`<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">${unsafeSVG(el_svg.innerHTML)}</svg>`\n}\n\n/**\n * Checks if the call mode is active by querying the 'call-opened' class\n * @author                 : PS\n * @created                : 2022-05-22 [WPS-4768]\n */\nexport function isCallModeActive(): boolean {\n    return document.getElementsByTagName('body')[0].classList.contains('call-opened'); \n}"]}